#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		СоздатьСообщение("Новая заявка на обслуживание");
	
	Иначе  
		
		ЗаписанныеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			"Специалист, ДатаПроведенияРабот, ВремяНачалаРабот, ВремяОкончанияРабот");
		Если ЗаписанныеРеквизиты.Специалист <> Специалист
			Или ЗаписанныеРеквизиты.ДатаПроведенияРабот <> ДатаПроведенияРабот
			Или ЗаписанныеРеквизиты.ВремяНачалаРабот <> ВремяНачалаРабот
			Или ЗаписанныеРеквизиты.ВремяОкончанияРабот <> ВремяОкончанияРабот Тогда
				
				СоздатьСообщение("Изменена заявка на обслуживание");
				
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВыполненныеРаботы.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Нстр("ru = ""Нет выполненных работ"""), , "ВыполненныеРаботы", 
			"Объект", Отказ);
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, 
		"ВидДоговора, ВКМ_ДатаНачалаДействияДоговора, ВКМ_ДатаОкончанияДействияДоговора");
	
	Если РеквизитыДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Нстр("ru = ""Договор не является договором абонентского обслуживания"""), , "Договор", 
			"Объект", Отказ);
	ИначеЕсли Дата < РеквизитыДокумента.ВКМ_ДатаНачалаДействияДоговора 
		Или Дата > РеквизитыДокумента.ВКМ_ДатаОкончанияДействияДоговора Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Нстр("ru = ""Договор не действителен на эту дату"""), , "Договор", 
			"Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ,Режим)

	ЧасовКОплате = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
	СтавкаЧаса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВКМ_СтоимостьЧасаРаботыСпециалиста");
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
	Движение.Период = Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
	Движение.Клиент = Клиент;
	Движение.Договор = Договор;
	Движение.КоличествоЧасов = ЧасовКОплате;
	Движение.СуммаКОплате = ЧасовКОплате * СтавкаЧаса;

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции 

Процедура СоздатьСообщение(Текст)
	
	ТекстСообщения = 
		СтрШаблон("%1 №%2 от %3
		|Клиент: %4
		|Дата проведения работ: %5
		|Время: %6 - %7
		|Специалист: %8",
		Текст, Номер, Дата,
		Клиент,
		ДатаПроведенияРабот,
		ВремяНачалаРабот, ВремяОкончанияРабот,
		Специалист);
	
	Попытка
		УведомлениеВТг = Справочники.ВКМ_УведомленияВТелеграм.СоздатьЭлемент();
		УведомлениеВТг.ТекстСообщения = ТекстСообщения;
		УведомлениеВТг.Записать();
	Исключение 
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("Запись сообщения в справочник уведомления в тг", 
			УровеньЖурналаРегистрации.Ошибка,,, "Не удалось создать новый элемент");
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли
